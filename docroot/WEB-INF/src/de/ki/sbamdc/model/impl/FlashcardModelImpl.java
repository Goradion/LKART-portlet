/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package de.ki.sbamdc.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import de.ki.sbamdc.model.Flashcard;
import de.ki.sbamdc.model.FlashcardModel;
import de.ki.sbamdc.model.FlashcardSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Flashcard service. Represents a row in the &quot;sbamdc_Flashcard&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link FlashcardModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link FlashcardImpl}.
 * </p>
 *
 * @author Simon Bastian, Alexander Mueller, Diego Castellanos
 * @see FlashcardImpl
 * @see Flashcard
 * @see FlashcardModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class FlashcardModelImpl extends BaseModelImpl<Flashcard>
	implements FlashcardModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a flashcard model instance should use the {@link Flashcard} interface instead.
	 */
	public static final String TABLE_NAME = "sbamdc_Flashcard";
	public static final Object[][] TABLE_COLUMNS = {
			{ "id_", Types.BIGINT },
			{ "question_txt", Types.VARCHAR },
			{ "question_pct", Types.VARCHAR },
			{ "answer_txt", Types.VARCHAR },
			{ "answer_pct", Types.VARCHAR },
			{ "cardBoxId", Types.BIGINT }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("id_", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("question_txt", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("question_pct", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("answer_txt", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("answer_pct", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("cardBoxId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE = "create table sbamdc_Flashcard (id_ LONG not null primary key,question_txt VARCHAR(75) null,question_pct VARCHAR(75) null,answer_txt VARCHAR(75) null,answer_pct VARCHAR(75) null,cardBoxId LONG)";
	public static final String TABLE_SQL_DROP = "drop table sbamdc_Flashcard";
	public static final String ORDER_BY_JPQL = " ORDER BY flashcard.id DESC";
	public static final String ORDER_BY_SQL = " ORDER BY sbamdc_Flashcard.id_ DESC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.de.ki.sbamdc.model.Flashcard"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.de.ki.sbamdc.model.Flashcard"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.de.ki.sbamdc.model.Flashcard"),
			true);
	public static final long CARDBOXID_COLUMN_BITMASK = 1L;
	public static final long ID_COLUMN_BITMASK = 2L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Flashcard toModel(FlashcardSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Flashcard model = new FlashcardImpl();

		model.setId(soapModel.getId());
		model.setQuestion_txt(soapModel.getQuestion_txt());
		model.setQuestion_pct(soapModel.getQuestion_pct());
		model.setAnswer_txt(soapModel.getAnswer_txt());
		model.setAnswer_pct(soapModel.getAnswer_pct());
		model.setCardBoxId(soapModel.getCardBoxId());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Flashcard> toModels(FlashcardSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Flashcard> models = new ArrayList<Flashcard>(soapModels.length);

		for (FlashcardSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.de.ki.sbamdc.model.Flashcard"));

	public FlashcardModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Flashcard.class;
	}

	@Override
	public String getModelClassName() {
		return Flashcard.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("id", getId());
		attributes.put("question_txt", getQuestion_txt());
		attributes.put("question_pct", getQuestion_pct());
		attributes.put("answer_txt", getAnswer_txt());
		attributes.put("answer_pct", getAnswer_pct());
		attributes.put("cardBoxId", getCardBoxId());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long id = (Long)attributes.get("id");

		if (id != null) {
			setId(id);
		}

		String question_txt = (String)attributes.get("question_txt");

		if (question_txt != null) {
			setQuestion_txt(question_txt);
		}

		String question_pct = (String)attributes.get("question_pct");

		if (question_pct != null) {
			setQuestion_pct(question_pct);
		}

		String answer_txt = (String)attributes.get("answer_txt");

		if (answer_txt != null) {
			setAnswer_txt(answer_txt);
		}

		String answer_pct = (String)attributes.get("answer_pct");

		if (answer_pct != null) {
			setAnswer_pct(answer_pct);
		}

		Long cardBoxId = (Long)attributes.get("cardBoxId");

		if (cardBoxId != null) {
			setCardBoxId(cardBoxId);
		}
	}

	@JSON
	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		_columnBitmask = -1L;

		_id = id;
	}

	@JSON
	@Override
	public String getQuestion_txt() {
		if (_question_txt == null) {
			return StringPool.BLANK;
		}
		else {
			return _question_txt;
		}
	}

	@Override
	public void setQuestion_txt(String question_txt) {
		_question_txt = question_txt;
	}

	@JSON
	@Override
	public String getQuestion_pct() {
		if (_question_pct == null) {
			return StringPool.BLANK;
		}
		else {
			return _question_pct;
		}
	}

	@Override
	public void setQuestion_pct(String question_pct) {
		_question_pct = question_pct;
	}

	@JSON
	@Override
	public String getAnswer_txt() {
		if (_answer_txt == null) {
			return StringPool.BLANK;
		}
		else {
			return _answer_txt;
		}
	}

	@Override
	public void setAnswer_txt(String answer_txt) {
		_answer_txt = answer_txt;
	}

	@JSON
	@Override
	public String getAnswer_pct() {
		if (_answer_pct == null) {
			return StringPool.BLANK;
		}
		else {
			return _answer_pct;
		}
	}

	@Override
	public void setAnswer_pct(String answer_pct) {
		_answer_pct = answer_pct;
	}

	@JSON
	@Override
	public long getCardBoxId() {
		return _cardBoxId;
	}

	@Override
	public void setCardBoxId(long cardBoxId) {
		_columnBitmask |= CARDBOXID_COLUMN_BITMASK;

		if (!_setOriginalCardBoxId) {
			_setOriginalCardBoxId = true;

			_originalCardBoxId = _cardBoxId;
		}

		_cardBoxId = cardBoxId;
	}

	public long getOriginalCardBoxId() {
		return _originalCardBoxId;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			Flashcard.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Flashcard toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Flashcard)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		FlashcardImpl flashcardImpl = new FlashcardImpl();

		flashcardImpl.setId(getId());
		flashcardImpl.setQuestion_txt(getQuestion_txt());
		flashcardImpl.setQuestion_pct(getQuestion_pct());
		flashcardImpl.setAnswer_txt(getAnswer_txt());
		flashcardImpl.setAnswer_pct(getAnswer_pct());
		flashcardImpl.setCardBoxId(getCardBoxId());

		flashcardImpl.resetOriginalValues();

		return flashcardImpl;
	}

	@Override
	public int compareTo(Flashcard flashcard) {
		int value = 0;

		if (getId() < flashcard.getId()) {
			value = -1;
		}
		else if (getId() > flashcard.getId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Flashcard)) {
			return false;
		}

		Flashcard flashcard = (Flashcard)obj;

		long primaryKey = flashcard.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		FlashcardModelImpl flashcardModelImpl = this;

		flashcardModelImpl._originalCardBoxId = flashcardModelImpl._cardBoxId;

		flashcardModelImpl._setOriginalCardBoxId = false;

		flashcardModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Flashcard> toCacheModel() {
		FlashcardCacheModel flashcardCacheModel = new FlashcardCacheModel();

		flashcardCacheModel.id = getId();

		flashcardCacheModel.question_txt = getQuestion_txt();

		String question_txt = flashcardCacheModel.question_txt;

		if ((question_txt != null) && (question_txt.length() == 0)) {
			flashcardCacheModel.question_txt = null;
		}

		flashcardCacheModel.question_pct = getQuestion_pct();

		String question_pct = flashcardCacheModel.question_pct;

		if ((question_pct != null) && (question_pct.length() == 0)) {
			flashcardCacheModel.question_pct = null;
		}

		flashcardCacheModel.answer_txt = getAnswer_txt();

		String answer_txt = flashcardCacheModel.answer_txt;

		if ((answer_txt != null) && (answer_txt.length() == 0)) {
			flashcardCacheModel.answer_txt = null;
		}

		flashcardCacheModel.answer_pct = getAnswer_pct();

		String answer_pct = flashcardCacheModel.answer_pct;

		if ((answer_pct != null) && (answer_pct.length() == 0)) {
			flashcardCacheModel.answer_pct = null;
		}

		flashcardCacheModel.cardBoxId = getCardBoxId();

		return flashcardCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(13);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", question_txt=");
		sb.append(getQuestion_txt());
		sb.append(", question_pct=");
		sb.append(getQuestion_pct());
		sb.append(", answer_txt=");
		sb.append(getAnswer_txt());
		sb.append(", answer_pct=");
		sb.append(getAnswer_pct());
		sb.append(", cardBoxId=");
		sb.append(getCardBoxId());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(22);

		sb.append("<model><model-name>");
		sb.append("de.ki.sbamdc.model.Flashcard");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>question_txt</column-name><column-value><![CDATA[");
		sb.append(getQuestion_txt());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>question_pct</column-name><column-value><![CDATA[");
		sb.append(getQuestion_pct());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>answer_txt</column-name><column-value><![CDATA[");
		sb.append(getAnswer_txt());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>answer_pct</column-name><column-value><![CDATA[");
		sb.append(getAnswer_pct());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>cardBoxId</column-name><column-value><![CDATA[");
		sb.append(getCardBoxId());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = Flashcard.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			Flashcard.class
		};
	private long _id;
	private String _question_txt;
	private String _question_pct;
	private String _answer_txt;
	private String _answer_pct;
	private long _cardBoxId;
	private long _originalCardBoxId;
	private boolean _setOriginalCardBoxId;
	private long _columnBitmask;
	private Flashcard _escapedModel;
}