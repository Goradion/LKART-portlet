/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package de.ki.sbamdc.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import de.ki.sbamdc.model.LearnProgress;
import de.ki.sbamdc.model.LearnProgressModel;
import de.ki.sbamdc.model.LearnProgressSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the LearnProgress service. Represents a row in the &quot;sbamdc_LearnProgress&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link LearnProgressModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link LearnProgressImpl}.
 * </p>
 *
 * @author Simon Bastian, Alexander Mueller, Diego Castellanos
 * @see LearnProgressImpl
 * @see LearnProgress
 * @see LearnProgressModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class LearnProgressModelImpl extends BaseModelImpl<LearnProgress>
	implements LearnProgressModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a learn progress model instance should use the {@link LearnProgress} interface instead.
	 */
	public static final String TABLE_NAME = "sbamdc_LearnProgress";
	public static final Object[][] TABLE_COLUMNS = {
			{ "id_", Types.BIGINT },
			{ "userId_fk", Types.BIGINT },
			{ "cardBoxId_fk", Types.BIGINT },
			{ "flashcardId_fk", Types.BIGINT },
			{ "progress", Types.INTEGER }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("id_", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId_fk", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("cardBoxId_fk", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("flashcardId_fk", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("progress", Types.INTEGER);
	}

	public static final String TABLE_SQL_CREATE = "create table sbamdc_LearnProgress (id_ LONG not null primary key,userId_fk LONG,cardBoxId_fk LONG,flashcardId_fk LONG,progress INTEGER)";
	public static final String TABLE_SQL_DROP = "drop table sbamdc_LearnProgress";
	public static final String ORDER_BY_JPQL = " ORDER BY learnProgress.id ASC";
	public static final String ORDER_BY_SQL = " ORDER BY sbamdc_LearnProgress.id_ ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.de.ki.sbamdc.model.LearnProgress"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.de.ki.sbamdc.model.LearnProgress"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.de.ki.sbamdc.model.LearnProgress"),
			true);
	public static final long CARDBOXID_FK_COLUMN_BITMASK = 1L;
	public static final long FLASHCARDID_FK_COLUMN_BITMASK = 2L;
	public static final long USERID_FK_COLUMN_BITMASK = 4L;
	public static final long ID_COLUMN_BITMASK = 8L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static LearnProgress toModel(LearnProgressSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		LearnProgress model = new LearnProgressImpl();

		model.setId(soapModel.getId());
		model.setUserId_fk(soapModel.getUserId_fk());
		model.setCardBoxId_fk(soapModel.getCardBoxId_fk());
		model.setFlashcardId_fk(soapModel.getFlashcardId_fk());
		model.setProgress(soapModel.getProgress());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<LearnProgress> toModels(LearnProgressSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<LearnProgress> models = new ArrayList<LearnProgress>(soapModels.length);

		for (LearnProgressSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.de.ki.sbamdc.model.LearnProgress"));

	public LearnProgressModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return LearnProgress.class;
	}

	@Override
	public String getModelClassName() {
		return LearnProgress.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("id", getId());
		attributes.put("userId_fk", getUserId_fk());
		attributes.put("cardBoxId_fk", getCardBoxId_fk());
		attributes.put("flashcardId_fk", getFlashcardId_fk());
		attributes.put("progress", getProgress());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long id = (Long)attributes.get("id");

		if (id != null) {
			setId(id);
		}

		Long userId_fk = (Long)attributes.get("userId_fk");

		if (userId_fk != null) {
			setUserId_fk(userId_fk);
		}

		Long cardBoxId_fk = (Long)attributes.get("cardBoxId_fk");

		if (cardBoxId_fk != null) {
			setCardBoxId_fk(cardBoxId_fk);
		}

		Long flashcardId_fk = (Long)attributes.get("flashcardId_fk");

		if (flashcardId_fk != null) {
			setFlashcardId_fk(flashcardId_fk);
		}

		Integer progress = (Integer)attributes.get("progress");

		if (progress != null) {
			setProgress(progress);
		}
	}

	@JSON
	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		_id = id;
	}

	@JSON
	@Override
	public long getUserId_fk() {
		return _userId_fk;
	}

	@Override
	public void setUserId_fk(long userId_fk) {
		_columnBitmask |= USERID_FK_COLUMN_BITMASK;

		if (!_setOriginalUserId_fk) {
			_setOriginalUserId_fk = true;

			_originalUserId_fk = _userId_fk;
		}

		_userId_fk = userId_fk;
	}

	public long getOriginalUserId_fk() {
		return _originalUserId_fk;
	}

	@JSON
	@Override
	public long getCardBoxId_fk() {
		return _cardBoxId_fk;
	}

	@Override
	public void setCardBoxId_fk(long cardBoxId_fk) {
		_columnBitmask |= CARDBOXID_FK_COLUMN_BITMASK;

		if (!_setOriginalCardBoxId_fk) {
			_setOriginalCardBoxId_fk = true;

			_originalCardBoxId_fk = _cardBoxId_fk;
		}

		_cardBoxId_fk = cardBoxId_fk;
	}

	public long getOriginalCardBoxId_fk() {
		return _originalCardBoxId_fk;
	}

	@JSON
	@Override
	public long getFlashcardId_fk() {
		return _flashcardId_fk;
	}

	@Override
	public void setFlashcardId_fk(long flashcardId_fk) {
		_columnBitmask |= FLASHCARDID_FK_COLUMN_BITMASK;

		if (!_setOriginalFlashcardId_fk) {
			_setOriginalFlashcardId_fk = true;

			_originalFlashcardId_fk = _flashcardId_fk;
		}

		_flashcardId_fk = flashcardId_fk;
	}

	public long getOriginalFlashcardId_fk() {
		return _originalFlashcardId_fk;
	}

	@JSON
	@Override
	public int getProgress() {
		return _progress;
	}

	@Override
	public void setProgress(int progress) {
		_progress = progress;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			LearnProgress.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public LearnProgress toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (LearnProgress)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		LearnProgressImpl learnProgressImpl = new LearnProgressImpl();

		learnProgressImpl.setId(getId());
		learnProgressImpl.setUserId_fk(getUserId_fk());
		learnProgressImpl.setCardBoxId_fk(getCardBoxId_fk());
		learnProgressImpl.setFlashcardId_fk(getFlashcardId_fk());
		learnProgressImpl.setProgress(getProgress());

		learnProgressImpl.resetOriginalValues();

		return learnProgressImpl;
	}

	@Override
	public int compareTo(LearnProgress learnProgress) {
		long primaryKey = learnProgress.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof LearnProgress)) {
			return false;
		}

		LearnProgress learnProgress = (LearnProgress)obj;

		long primaryKey = learnProgress.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		LearnProgressModelImpl learnProgressModelImpl = this;

		learnProgressModelImpl._originalUserId_fk = learnProgressModelImpl._userId_fk;

		learnProgressModelImpl._setOriginalUserId_fk = false;

		learnProgressModelImpl._originalCardBoxId_fk = learnProgressModelImpl._cardBoxId_fk;

		learnProgressModelImpl._setOriginalCardBoxId_fk = false;

		learnProgressModelImpl._originalFlashcardId_fk = learnProgressModelImpl._flashcardId_fk;

		learnProgressModelImpl._setOriginalFlashcardId_fk = false;

		learnProgressModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<LearnProgress> toCacheModel() {
		LearnProgressCacheModel learnProgressCacheModel = new LearnProgressCacheModel();

		learnProgressCacheModel.id = getId();

		learnProgressCacheModel.userId_fk = getUserId_fk();

		learnProgressCacheModel.cardBoxId_fk = getCardBoxId_fk();

		learnProgressCacheModel.flashcardId_fk = getFlashcardId_fk();

		learnProgressCacheModel.progress = getProgress();

		return learnProgressCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(11);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", userId_fk=");
		sb.append(getUserId_fk());
		sb.append(", cardBoxId_fk=");
		sb.append(getCardBoxId_fk());
		sb.append(", flashcardId_fk=");
		sb.append(getFlashcardId_fk());
		sb.append(", progress=");
		sb.append(getProgress());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(19);

		sb.append("<model><model-name>");
		sb.append("de.ki.sbamdc.model.LearnProgress");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId_fk</column-name><column-value><![CDATA[");
		sb.append(getUserId_fk());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>cardBoxId_fk</column-name><column-value><![CDATA[");
		sb.append(getCardBoxId_fk());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>flashcardId_fk</column-name><column-value><![CDATA[");
		sb.append(getFlashcardId_fk());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>progress</column-name><column-value><![CDATA[");
		sb.append(getProgress());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = LearnProgress.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			LearnProgress.class
		};
	private long _id;
	private long _userId_fk;
	private long _originalUserId_fk;
	private boolean _setOriginalUserId_fk;
	private long _cardBoxId_fk;
	private long _originalCardBoxId_fk;
	private boolean _setOriginalCardBoxId_fk;
	private long _flashcardId_fk;
	private long _originalFlashcardId_fk;
	private boolean _setOriginalFlashcardId_fk;
	private int _progress;
	private long _columnBitmask;
	private LearnProgress _escapedModel;
}